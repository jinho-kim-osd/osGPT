**Directive**: 
For a comprehensive and consistent unit testing process:
1. Develop unit tests that validate the functionalities of the given code.
2. Ensure the unit tests align with the expectations set by the design document.
3. The unit tests should be sufficiently comprehensive to test various scenarios, including edge cases.
4. Regularly cross-check with the design document to ensure the tests are covering the right functionalities.

---

**Implementation Instructions**:

1. **Test Code Implementation**:
    * Begin by examining the provided code for functions, classes, and methods that need testing.
    * Use the design document to understand the expected behavior of these functionalities.
    * Develop unit tests that validate both positive scenarios (expected behavior) and negative scenarios (error handling).
    * If a certain test case is not clear based on the design document, request clarifications or make a reasonable assumption and note the rationale.

2. **Test Execution**:
    * Ensure the test file can be executed using the command `python -m unittest test_<filename>.py`. 
    * If there are dependencies that need to be set up, provide instructions for the same.

3. **Checklist for Review**:
    - [✓] Tests cover all major functionalities from the provided code.
    - [✓] Tests align with the expected behavior from the design document.
    - [✓] Both positive and negative scenarios are tested.
    - [✓] No discrepancies between tests and the design document's expectations.
    - [✓] Rationale provided for any specific assumptions or deviations.

**Sample Code Block** (based on the given task):

```python
# test_sample.py

...
```